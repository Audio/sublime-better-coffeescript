# [PackageDev] target_format: plist, ext: tmLanguage
comment: 'CoffeeScript Syntax: version 1'
name: CoffeeScript
scopeName: source.coffee
fileTypes: [coffee, Cakefile, coffee.erb, cson, cjsx]

patterns:
- comment: "match stuff like: a -> \u2026 "
  name: meta.inline.function.coffee
  match: (\([^()]*?\))\s*([=-]>)
  captures:
    '1': {name: variable.parameter.function.coffee}
    '2': {name: storage.type.function.coffee}

- name: meta.class.instance.constructor
  match: (new)\s+(\w+(?:\.\w*)*)
  captures:
    '1': {name: keyword.operator.new.coffee}
    '2': {name: support.class.coffee}

- name: string.quoted.heredoc.coffee
  begin: ''''''''
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.coffee}
  end: ''''''''
  endCaptures:
    '0': {name: punctuation.definition.string.end.coffee}

- name: string.quoted.double.heredoc.coffee
  begin: '"""'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.coffee}
  end: '"""'
  endCaptures:
    '0': {name: punctuation.definition.string.end.coffee}
  patterns:
  - name: constant.character.escape.coffee
    match: \\.
  - include: '#interpolated_coffee'

- name: string.quoted.script.coffee
  begin: '`'
  beginCaptures:
    '0': {name: punctuation.definition.string.begin.coffee}
  end: '`'
  endCaptures:
    '0': {name: punctuation.definition.string.end.coffee}
  patterns:
  - name: constant.character.escape.coffee
    match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)

- name: comment.block.coffee
  begin: (?<!#)###(?!#)
  end: '###(?:[ \t]*\n)'
  captures:
    '0': {name: punctuation.definition.comment.coffee}
  patterns:
  - name: storage.type.annotation.coffeescript
    match: '@\w*'

- name: comment.line.number-sign.coffee
  match: (#)(?!\{).*$\n?
  captures:
    '1': {name: punctuation.definition.comment.coffee}

- name: string.regexp.coffee
  begin: /{3}
  end: /{3}[imgy]{0,4}
  patterns:
  - include: '#interpolated_coffee'
  - include: '#embedded_comment'

- name: string.regexp.coffee
  match: /(?![\s=/*+{}?])(\\.|.)*?/[igmy]{0,4}(?![a-zA-Z0-9])

- name: keyword.control.coffee
  match: "(?x)\n\\b(?<![\\.\\$])(\n\tbreak|by|catch|continue|else|finally|for|in|of|if|return|yield|switch|\n\
    \tthen|throw|try|unless|when|while|until|loop|do|(?<=for)\\s+own\n)(?!\\s*:)\\\
    b"

- name: keyword.operator.coffee
  match: |-
    (?x)
    and=|or=|!|%|&|\^|\*|\/|(\-)?\-(?!>)|\+\+|\+|~|==|=(?!>)|!=|<=|>=|<<=|>>=|
    >>>=|<>|<|>|!|&&|\.\.(\.)?|\?|\||\|\||\:|\*=|(?<!\()/=|%=|\+=|\-=|&=|
    \^=|\b(?<![\.\$])(instanceof|new|delete|typeof|and|or|is|isnt|not|super)\b
- name: variable.assignment.coffee
  match: ([a-zA-Z\$_](\w|\$|\.)*\s*(?!\::)((:)|(=))(?!(\s*\(.*\))?\s*((=|-)>)))
  captures:
    '1': {name: variable.assignment.coffee}
    '4': {name: punctuation.separator.key-value}
    '5': {name: keyword.operator.coffee}

- name: meta.variable.assignment.destructured.coffee
  begin: (?<=\s|^)([\[\{])(?=.*?[\]\}]\s+[:=])
  beginCaptures:
    '0': {name: keyword.operator.coffee}
  end: ([\]\}]\s*[:=])
  endCaptures:
    '0': {name: keyword.operator.coffee}
  patterns:
  - include: '#variable_name'
  - include: '#instance_variable'
  - include: '#single_quoted_string'
  - include: '#double_quoted_string'
  - include: '#numeric'

- name: meta.function.coffee
  match: "(?x)\n(\\s*)\n(?=[a-zA-Z\\$_@])\n(\n\t[a-zA-Z\\$_@](\\w|\\$|:|\\.)*\\s*\n\
    \t(?=[:=]( (\\s*.\\( ($)) | (\\s*\\(.*\\) )?\\s*([=-]>)))\n)"
  captures:
    '2': {name: entity.name.function.coffee}
    '3': {name: entity.name.function.coffee}
    '4': {name: variable.parameter.function.coffee}
    '5': {name: storage.type.function.coffee}
- comment: Show well-known functions from Express and Mocha in Go To Symbol view
  name: meta.function.symbols.coffee
  begin: ^\s*(describe|it|app\.(get|post|put|all|del|delete))[^\w]
  end: $
  patterns:
  - include: $self
- name: storage.type.function.coffee
  match: '[=-]>'
- name: constant.language.boolean.true.coffee
  match: \b(?<!\.)(true|on|yes)(?!\s*[:=])\b
- name: constant.language.boolean.false.coffee
  match: \b(?<!\.)(false|off|no)(?!\s*[:=])\b
- name: constant.language.null.coffee
  match: \b(?<!\.)null(?!\s*[:=])\b
- name: variable.language.coffee
  match: \b(?<!\.)(this|extends)(?!\s*[:=])\b
- name: meta.class.coffee
  match: (class\b)\s+(@?[a-zA-Z\$_][\w\.]*)?(?:\s+(extends)\s+(@?[a-zA-Z\$\._][\w\.]*))?
  captures:
    '1': {name: storage.type.class.coffee}
    '2': {name: entity.name.type.class.coffee}
    '3': {name: keyword.control.inheritance.coffee}
    '4': {name: entity.other.inherited-class.coffee}
- name: keyword.other.coffee
  match: \b(debugger|\\)\b
- name: support.class.coffee
  match: "(?x)\\b(\n\tArray|ArrayBuffer|Blob|Boolean|Date|document\n\t|event|Float(32|64)Array|Function|\n\
    \tInt(8|16|32|64)Array|Math|Map|Number|\n\tObject|Proxy|RegExp|Set|String|WeakMap|\n\
    \twindow|Uint(8|16|32|64)Array|XMLHttpRequest|Symbol\n)\\b"
- name: support.function.console.coffee
  match: ((?<=console\.)(debug|warn|info|log|error|time|timeEnd|assert))\b
- name: support.function.coffee
  match: "(?x)\\b(\n\tdecodeURI(Component)?|encodeURI(Component)?|eval|parse(Float|Int)|require\n\
    )\\b"
- name: support.function.method.array.coffee
  match: "(?x)((?<=\\.)(\n\tapply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|\n\
    \tisPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|\n\treduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|\n\
    \tunshift|valueOf\n))\\b"
- name: support.function.static.array.coffee
  match: "(?x)((?<=Array\\.)(\n\tisArray\n))\\b"
- name: support.function.static.object.coffee
  match: "(?x)((?<=Object\\.)(\n\tcreate|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|\n\
    \tgetProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|\n\
    \tisnt|keys|preventExtensions|seal\n))\\b"
- name: support.function.static.math.coffee
  match: "(?x)((?<=Math\\.)(\n\tabs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|\n\
    \thypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|\n\t\
    tan|tanh|trunc\n))\\b"
- name: support.function.static.number.coffee
  match: "(?x)((?<=Number\\.)(\n\tis(Finite|Integer|NaN)|toInteger\n))\\b"
- name: constant.language.coffee
  match: \b(Infinity|NaN|undefined)\b
- name: punctuation.terminator.statement.coffee
  match: \;
- name: meta.delimiter.object.comma.coffee
  match: ',[ |\t]*'
- name: meta.delimiter.method.period.coffee
  match: \.
- name: meta.brace.curly.coffee
  match: \{|\}
- name: meta.brace.round.coffee
  match: \(|\)
- name: meta.brace.square.coffee
  match: \[|\]\s*
- include: '#instance_variable'
- include: '#single_quoted_string'
- include: '#double_quoted_string'
- include: '#numeric'
repository:
  double_quoted_string:
    patterns:
    - name: string.quoted.double.coffee
      begin: '"'
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: '"'
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)
      - include: '#interpolated_coffee'
  embedded_comment:
    patterns:
    - name: comment.line.number-sign.coffee
      match: (?<!\\)(#).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.coffee}
  instance_variable:
    patterns:
    - name: variable.other.readwrite.instance.coffee
      match: (@)([a-zA-Z_\$]\w*)?
  interpolated_coffee:
    patterns:
    - name: source.coffee.embedded.source
      begin: \#\{
      end: \}
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      patterns:
      - include: $self
    - name: source.coffee.embedded.source
      begin: <%
      end: '%>'
      captures:
        '0': {name: punctuation.section.embedded.coffee}
      patterns:
      - include: $self
  numeric:
    patterns:
    - name: constant.numeric.coffee
      match: (?<!\$)\b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b
  single_quoted_string:
    patterns:
    - name: string.quoted.single.coffee
      begin: ''''
      beginCaptures:
        '0': {name: punctuation.definition.string.begin.coffee}
      end: ''''
      endCaptures:
        '0': {name: punctuation.definition.string.end.coffee}
      patterns:
      - name: constant.character.escape.coffee
        match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
  variable_name:
    patterns:
    - name: variable.assignment.coffee
      match: ([a-zA-Z\$_]\w*(\.\w+)*)
      captures:
        '1': {name: variable.assignment.coffee}
firstLineMatch: ^#!.*\bcoffee
foldingStartMarker: ^\s*class\s+\S.*$|.*(->|=>)\s*$|.*[\[{]\s*$
foldingStopMarker: ^\s*$|^\s*[}\]]\s*$
keyEquivalent: ^~C
